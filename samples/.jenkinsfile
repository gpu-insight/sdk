import hudson.FilePath
import jenkins.model.Jenkins

pipeline {
    agent {
        node {
            label 'umd'
        }
    }

    triggers {
        pollSCM('H/2 * * * *')
        upstream(upstreamProjects: 'umd', threshold: hudson.model.Result.SUCCESS)
    }

    options {
        disableConcurrentBuilds();
    }

    environment {
        YUM_CONF_HOME='/home/jenkins/yum.d'
    }

    stages {
        stage('setup') {
            steps {
                dir("${YUM_CONF_HOME}") {
                    git credentialsId: 'd506c69d-6153-4a2f-b3e2-3daf87e76522',
                        url: 'http://gitlab.botson.com/neo/yum.conf.git'

                    withCredentials([usernamePassword(credentialsId: '1000',
                                                      passwordVariable: 'JENKINS_PASSWORD',
                                                      usernameVariable: 'JENKINS_USERNAME')]) {
                        sh script: "sed -i 's/.*/echo & |envsubst/e' yum.conf"
                        sh script: """
                            sshpass -p \"${JENKINS_PASSWORD}\" sudo -u root yum -c ${YUM_CONF_HOME}/yum.conf makecache
                        """
                        sh script: """
                            sshpass -p \"${JENKINS_PASSWORD}\" sudo -u root yum -c ${YUM_CONF_HOME}/yum.conf install -y \
                                botson-sdk \
                                botson-umd \
                                botson-kmd
                        """
                        sh script: """
                            sshpass -p \"${JENKINS_PASSWORD}\" sudo -u root yum install -y \
                                mesa-libEGL-devel \
                                freeglut-devel
                        """
                    }
                }
            }
        }

        stage('build') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/master']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'SubmoduleOption',
                        disableSubmodules: false,
                        parentCredentials: true,
                        recursiveSubmodules: true,
                        reference: '',
                        trackingSubmodules: false
                    ]],
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        credentialsId: '82ad0d8a-d442-4522-a91f-e4cb2caa3a02',
                        url: 'http://gitlab.botson.com/bts_repos/gb/udriver/btx_samples.git'
                    ]]
                ])
                sh script: 'pwd'
                sh script: 'git clean -fdx'
                sh script: 'scons -Q'
            }
        }

        stage('valgrind') {
            steps {
                runValgrind (
                    childSilentAfterFork: true,
                    excludePattern: '',
                    generateSuppressions: true,
                    ignoreExitCode: true,
                    includePattern: 'bin/texview',
                    outputDirectory: '',
                    outputFileEnding: '.memcheck',
                    programOptions: '',
                    removeOldReports: true,
                    suppressionFiles: '',
                    tool: [
                        $class: 'ValgrindToolMemcheck',
                        leakCheckLevel: 'full',
                        showReachable: true,
                        trackOrigins: true,
                        undefinedValueErrors: true
                    ],
                    traceChildren: true,
                    valgrindExecutable: '',
                    valgrindOptions: '',
                    workingDirectory: ''
                )

                publishValgrind(
                    failBuildOnInvalidReports: false,
                    failBuildOnMissingReports: false,
                    failThresholdDefinitelyLost: '2',
                    failThresholdInvalidReadWrite: '',
                    failThresholdTotal: '',
                    pattern: '*.memcheck',
                    publishResultsForAbortedBuilds: false,
                    publishResultsForFailedBuilds: false,
                    sourceSubstitutionPaths: '',
                    unstableThresholdDefinitelyLost: '',
                    unstableThresholdInvalidReadWrite: '',
                    unstableThresholdTotal: ''
                )
            }
        }
    }

    post {
        cleanup {
            withCredentials([usernamePassword(credentialsId: '1000',
                                              passwordVariable: 'JENKINS_PASSWORD',
                                              usernameVariable: 'JENKINS_USERNAME')]) {
                script {
                    dir("${YUM_CONF_HOME}") {
                        sh script: "sshpass -p \"${JENKINS_PASSWORD}\" sudo -u root git clean -fdx"
                    }
                    dir("${WORKSPACE}") {
                        sh script: "pwd"
                        sh script: "sshpass -p \"${JENKINS_PASSWORD}\" sudo -u root git clean -fdx"
                    }
                    'umd,kmd'.split(',').each { module ->
                        sh script: """
                            sshpass -p \"${JENKINS_PASSWORD}\" sudo -u root yum -c ${YUM_CONF_HOME}/yum.conf remove -y \
                                botson-${module}
                        """
                    }
                    sh script: """
                        sshpass -p \"${JENKINS_PASSWORD}\" sudo -u root yum -c ${YUM_CONF_HOME}/yum.conf remove -y \
                            freeglut
                    """
                }
            }
        }
    }
}

